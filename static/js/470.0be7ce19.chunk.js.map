{"version":3,"file":"static/js/470.0be7ce19.chunk.js","mappings":"+QAEaA,EAAYC,EAAAA,EAAAA,IAAH,uIAOTC,EAAcD,EAAAA,EAAAA,IAAH,gJACF,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,KAAvB,IAQdC,EAAQN,EAAAA,EAAAA,IAAH,yFAKLO,EAAYP,EAAAA,EAAAA,GAAH,wHAIX,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,KAAvB,G,mJCzBhBG,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,oCAMT,IAAMC,EAAc,mCAAG,sGACLF,EAAAA,EAAAA,IAAU,sBADL,uBACpBG,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qDAKdC,EAAY,mCAAG,WAAMC,GAAN,yFACHL,EAAAA,EAAAA,IAAA,iBAAoBK,IADjB,uBAClBF,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZG,EAAc,mCAAG,WAAMC,GAAN,yFACLP,EAAAA,EAAAA,IAAA,gBAA2B,CAChDQ,OAAQ,CACND,MAAAA,KAHwB,uBACpBJ,EADoB,EACpBA,KADoB,kBAMrBA,GANqB,2CAAH,qD,yJCOdM,GArBUjB,EAAAA,GAAAA,IAAH,sJAQCA,EAAAA,GAAAA,MAAH,gGAMEA,EAAAA,EAAAA,IAAOkB,EAAAA,IAAPlB,CAAH,+FAOSA,EAAAA,GAAAA,KAAH,4MAWVmB,EAAanB,EAAAA,GAAAA,OAAH,obAkBVoB,EAAYpB,EAAAA,GAAAA,MAAH,2P,SCxBtB,EAzBkB,SAAC,GAAwB,EAAtBqB,MAAuB,IAAhBC,EAAe,EAAfA,SAC1B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOR,EAAP,KAAcS,EAAd,KAYA,OACE,UAACP,EAAD,CAAYK,SAPO,SAAAG,GACnBA,EAAEC,iBAEFJ,EAASP,GACTS,EAAS,GACV,EAEC,WACE,SAACJ,EAAD,CAAWO,KAAK,OAAON,MAAON,EAAOa,SAZpB,SAAAH,GACnB,IAAQJ,EAAUI,EAAEI,cAAZR,MACRG,EAASH,EACV,KAUG,SAACF,EAAD,CAAYQ,KAAK,SAAjB,sBAGL,E,kDCyCD,G,QAlDe,WAAO,IAAD,EACnB,GAAwCG,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,eAApB,QAA+B,GAC9C,GAA4BX,EAAAA,EAAAA,UAAS,IAArC,eAAOY,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,YACRzB,EAAAA,EAAAA,IAAemB,GACZO,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPL,GAAU,OAAIK,GACf,IACAC,OAAM,kBACLC,EAAAA,GAAAA,MAAA,wDADK,GAGV,GAAE,CAACV,IAQJ,OACE,6BACE,SAAC,EAAD,CAAWX,SARU,SAAAsB,GAEvBZ,EAD4B,KAATY,EAAc,CAAEA,KAAAA,GAAS,CAAC,GAE7CR,EAAU,GACX,KAKG,UAAC,KAAD,WACGD,EAAOU,KAAI,gBAAGhC,EAAH,EAAGA,GAAIiC,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,YAAvB,OACV,SAAC,KAAD,WACE,UAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMZ,GAAYa,GAAE,UAAKrC,GAAxC,WACE,SAAC,KAAD,CACEsC,IACEJ,EAAW,0CAC4BA,GAD5B,UAEJK,GAETC,IAAKP,KAEP,SAAC,KAAD,UAAYA,QAVEjC,EADR,KAeZ,SAAC,EAAAyC,SAAD,WACE,SAAC,KAAD,UAGJ,SAAC,KAAD,MAGL,E","sources":["components/MoviesList.styled.js","moviesAPI.js","components/SearchBar.styled.js","components/SearchBar.jsx","pages/Movies.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  gap: 16px;\n  justify-content: center;\n`;\n\nexport const CardWrapper = styled.div`\n  border: 1px solid ${props => props.theme.colors.white};\n  border-radius: 8px;\n  transform: scale(1);\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nexport const Image = styled.img`\n  border-top-left-radius: 8px;\n  border-top-right-radius: 8px;\n`;\n\nexport const MovieName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: ${props => props.theme.colors.white};\n  text-align: center;\n`;\n","import axios from 'axios';\nconst API_KEY = '7cc21d4cba3da7a5d2a2ac6813f90105';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const getTrendMovies = async () => {\n  const { data } = await axios.get('trending/movie/day');\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMovieByName = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n","import styled from 'styled-components';\nimport { HiSearch } from 'react-icons/hi';\n\nexport const Wrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  margin-bottom: 16px;\n  text-transform: uppercase;\n`;\n\nexport const Input = styled.input`\n  padding: 8px 32px 8px 8px;\n  border-radius: 4px;\n  font: inherit;\n`;\n\nexport const Icon = styled(HiSearch)`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  right: 6px;\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border: 1px solid black;\n  margin-bottom: 30px;\n  overflow: hidden;\n`;\n\nexport const FormButton = styled.button`\n  display: inline-block;\n  height: 20px;\n  border: 1px solid black;\n  padding: 0px 5px;\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.4;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const FormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 18px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { useState } from 'react';\nimport { SearchForm, FormButton, FormInput } from './SearchBar.styled';\nimport PropTypes from 'prop-types';\n\nconst SearchBar = ({ value, onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleChange = e => {\n    const { value } = e.currentTarget;\n    setQuery(value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    onSubmit(query);\n    setQuery('');\n  };\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <FormInput type=\"text\" value={query} onChange={handleChange} />\n      <FormButton type=\"submit\">Search</FormButton>\n    </SearchForm>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import {\n  CardWrapper,\n  MovieName,\n  Container,\n  Image,\n} from 'components/MoviesList.styled';\nimport SearchBar from 'components/SearchBar';\nimport { getMovieByName } from 'moviesAPI';\nimport { Suspense, useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useSearchParams } from 'react-router-dom';\nimport notFoundPoster from 'images/poster.jpg';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('name') ?? '';\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    getMovieByName(movieName)\n      .then(({ results }) => {\n        setMovies([...results]);\n      })\n      .catch(() =>\n        toast.error(`Whoops, something went wrong! Please try again later!`)\n      );\n  }, [movieName]);\n\n  const handleFormSubmit = name => {\n    const nextParams = name !== '' ? { name } : {};\n    setSearchParams(nextParams);\n    setMovies([]);\n  };\n\n  return (\n    <main>\n      <SearchBar onSubmit={handleFormSubmit} />\n      <Container>\n        {movies.map(({ id, original_title, poster_path }) => (\n          <CardWrapper key={id}>\n            <Link state={{ from: location }} to={`${id}`}>\n              <Image\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w342/${poster_path}`\n                    : `${notFoundPoster}`\n                }\n                alt={original_title}\n              />\n              <MovieName>{original_title}</MovieName>\n            </Link>\n          </CardWrapper>\n        ))}\n        <Suspense>\n          <Outlet />\n        </Suspense>\n      </Container>\n      <ToastContainer />\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["Container","styled","CardWrapper","props","theme","colors","white","Image","MovieName","axios","api_key","getTrendMovies","data","getMovieById","id","getMovieByName","query","params","SearchForm","HiSearch","FormButton","FormInput","value","onSubmit","useState","setQuery","e","preventDefault","type","onChange","currentTarget","useSearchParams","searchParams","setSearchParams","movieName","get","movies","setMovies","location","useLocation","useEffect","then","results","catch","toast","name","map","original_title","poster_path","state","from","to","src","notFoundPoster","alt","Suspense"],"sourceRoot":""}