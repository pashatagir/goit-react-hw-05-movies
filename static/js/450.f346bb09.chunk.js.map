{"version":3,"file":"static/js/450.f346bb09.chunk.js","mappings":"mQAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,oCAMT,IAAMC,EAAc,mCAAG,sGACLF,EAAAA,EAAAA,IAAU,sBADL,uBACpBG,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qDAKdC,EAAY,mCAAG,WAAMC,GAAN,yFACHL,EAAAA,EAAAA,IAAA,iBAAoBK,IADjB,uBAClBF,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZG,EAAc,mCAAG,WAAMC,GAAN,yFACLP,EAAAA,EAAAA,IAAA,gBAA2B,CAChDQ,OAAQ,CACND,MAAAA,KAHwB,uBACpBJ,EADoB,EACpBA,KADoB,kBAMrBA,GANqB,2CAAH,qD,mICwB3B,EAhCkB,SAAC,GAAkB,IAAhBM,EAAe,EAAfA,SACnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOH,EAAP,KAAcI,EAAd,KAYA,OACE,UAAC,KAAD,CAAYF,SAPO,SAAAG,GACnBA,EAAEC,iBAEFJ,EAASF,GACTI,EAAS,GACV,EAEC,WACE,SAAC,KAAD,CACEG,KAAK,OACLC,MAAOR,EACPS,SAfe,SAAAJ,GACnB,IAAQG,EAAUH,EAAEK,cAAZF,MACRJ,EAASI,EACV,EAaKG,YAAY,sBAEd,SAAC,KAAD,CAAYJ,KAAK,SAAjB,UACE,SAAC,KAAD,QAIP,E,kDC6BD,G,QAlDe,WAAO,IAAD,EACnB,GAAwCK,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,eAApB,QAA+B,GAC9C,GAA4Bb,EAAAA,EAAAA,UAAS,IAArC,eAAOc,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,YACRtB,EAAAA,EAAAA,IAAegB,GACZO,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPL,GAAU,OAAIK,GACf,IACAC,OAAM,kBACLC,EAAAA,GAAAA,MAAA,wDADK,GAGV,GAAE,CAACV,IAQJ,OACE,6BACE,SAAC,EAAD,CAAWb,SARU,SAAAwB,GAEvBZ,EAD4B,KAATY,EAAc,CAAEA,KAAAA,GAAS,CAAC,GAE7CR,EAAU,GACX,KAKG,UAAC,KAAD,WACGD,EAAOU,KAAI,gBAAG7B,EAAH,EAAGA,GAAI8B,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,YAAvB,OACV,SAAC,KAAD,WACE,UAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMZ,GAAYa,GAAE,UAAKlC,GAAxC,WACE,SAAC,KAAD,CACEmC,IACEJ,EAAW,0CAC4BA,GAD5B,UAEJK,GAETC,IAAKP,KAEP,SAAC,KAAD,UAAYA,QAVG9B,EADT,KAeZ,SAAC,EAAAsC,SAAD,WACE,SAAC,KAAD,UAGJ,SAAC,KAAD,MAGL,E","sources":["moviesAPI.js","components/SearchBar.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '7cc21d4cba3da7a5d2a2ac6813f90105';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const getTrendMovies = async () => {\n  const { data } = await axios.get('trending/movie/day');\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMovieByName = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n","import { useState } from 'react';\nimport {\n  SearchForm,\n  FormButton,\n  FormInput,\n  Icon,\n} from '../styles/SearchBar.styled';\nimport PropTypes from 'prop-types';\n\nconst SearchBar = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleChange = e => {\n    const { value } = e.currentTarget;\n    setQuery(value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    onSubmit(query);\n    setQuery('');\n  };\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <FormInput\n        type=\"text\"\n        value={query}\n        onChange={handleChange}\n        placeholder=\"Search movies...\"\n      />\n      <FormButton type=\"submit\">\n        <Icon />\n      </FormButton>\n    </SearchForm>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import {\n  CardsWrapper,\n  MovieName,\n  Container,\n  Images,\n} from 'styles/MoviesList.styled';\nimport SearchBar from 'components/SearchBar';\nimport { getMovieByName } from 'moviesAPI';\nimport { Suspense, useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useSearchParams } from 'react-router-dom';\nimport notFoundPoster from 'images/poster.jpg';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('name') ?? '';\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    getMovieByName(movieName)\n      .then(({ results }) => {\n        setMovies([...results]);\n      })\n      .catch(() =>\n        toast.error(`Whoops, something went wrong! Please try again later!`)\n      );\n  }, [movieName]);\n\n  const handleFormSubmit = name => {\n    const nextParams = name !== '' ? { name } : {};\n    setSearchParams(nextParams);\n    setMovies([]);\n  };\n\n  return (\n    <main>\n      <SearchBar onSubmit={handleFormSubmit} />\n      <Container>\n        {movies.map(({ id, original_title, poster_path }) => (\n          <CardsWrapper key={id}>\n            <Link state={{ from: location }} to={`${id}`}>\n              <Images\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w342/${poster_path}`\n                    : `${notFoundPoster}`\n                }\n                alt={original_title}\n              />\n              <MovieName>{original_title}</MovieName>\n            </Link>\n          </CardsWrapper>\n        ))}\n        <Suspense>\n          <Outlet />\n        </Suspense>\n      </Container>\n      <ToastContainer />\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","api_key","getTrendMovies","data","getMovieById","id","getMovieByName","query","params","onSubmit","useState","setQuery","e","preventDefault","type","value","onChange","currentTarget","placeholder","useSearchParams","searchParams","setSearchParams","movieName","get","movies","setMovies","location","useLocation","useEffect","then","results","catch","toast","name","map","original_title","poster_path","state","from","to","src","notFoundPoster","alt","Suspense"],"sourceRoot":""}