{"version":3,"file":"static/js/597.6214705b.chunk.js","mappings":"2OAuDA,UAtCa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAUA,OATAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAa,GAAD,OAAIN,EAAJ,aACTO,MAAK,YAAe,IAAZJ,EAAW,EAAXA,KACPC,EAAQD,EACT,IACAK,OAAM,kBACLC,EAAAA,GAAAA,MAAA,wDADK,GAGV,GAAE,CAACT,KAEF,UAAC,KAAD,YACO,OAAJG,QAAI,IAAJA,OAAA,EAAAA,EAAMO,QAAS,EACdP,EAAKQ,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,UAAWC,EAAzB,EAAyBA,KAAMC,EAA/B,EAA+BA,aAA/B,OACP,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,IACED,EAAY,0CAC2BA,GAD3B,UAELE,GAETC,IAAKJ,KAEP,UAAC,KAAD,WACGA,EADH,KACWF,EADX,SATaC,EADR,KAgBT,SAAC,KAAD,UAjCN,kEAmCI,SAAC,KAAD,MAGL,C,mJCnDDM,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,oCAMT,IAAMC,EAAc,mCAAG,sGACLF,EAAAA,EAAAA,IAAU,sBADL,uBACpBG,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qDAKdhB,EAAY,mCAAG,WAAMiB,GAAN,yFACHJ,EAAAA,EAAAA,IAAA,iBAAoBI,IADjB,uBAClBD,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZE,EAAc,mCAAG,WAAMC,GAAN,yFACLN,EAAAA,EAAAA,IAAA,gBAA2B,CAChDO,OAAQ,CACND,MAAAA,KAHwB,uBACpBH,EADoB,EACpBA,KADoB,kBAMrBA,GANqB,2CAAH,qD","sources":["components/Cast.jsx","moviesAPI.js"],"sourcesContent":["import { getMovieById } from 'moviesAPI';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport notFoundPhotoProfile from 'images/avatar.png';\nimport {\n  CastImage,\n  CastItem,\n  CastList,\n  CastName,\n  Message,\n} from '../styles/Cast.styled';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst anApologyMessage =\n  'Sorry, but there is currently no information about the cast!';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  useEffect(() => {\n    getMovieById(`${movieId}/credits`)\n      .then(({ cast }) => {\n        setCast(cast);\n      })\n      .catch(() =>\n        toast.error(`Whoops, something went wrong! Please try again later!`)\n      );\n  }, [movieId]);\n  return (\n    <CastList>\n      {cast?.length > 0 ? (\n        cast.map(({ character, credit_id, name, profile_path }) => (\n          <CastItem key={credit_id}>\n            <CastImage\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                  : `${notFoundPhotoProfile}`\n              }\n              alt={name}\n            />\n            <CastName>\n              {name} ({character})\n            </CastName>\n          </CastItem>\n        ))\n      ) : (\n        <Message>{anApologyMessage}</Message>\n      )}\n      <ToastContainer />\n    </CastList>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nconst API_KEY = '7cc21d4cba3da7a5d2a2ac6813f90105';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const getTrendMovies = async () => {\n  const { data } = await axios.get('trending/movie/day');\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMovieByName = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n"],"names":["movieId","useParams","useState","cast","setCast","useEffect","getMovieById","then","catch","toast","length","map","character","credit_id","name","profile_path","src","notFoundPhotoProfile","alt","axios","api_key","getTrendMovies","data","id","getMovieByName","query","params"],"sourceRoot":""}